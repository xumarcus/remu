use crate::backend::Mem;

use super::Addr;

pub(crate) struct MMU([u8; 4096]);

impl MMU {
    pub(crate) fn new() -> Self {
        let mut ram = [0u8; 4096];
        ram[..80].copy_from_slice(&FONT);
        MMU(ram)
    }
}

impl Mem<Addr, u8> for MMU {
   fn read(&self, addr: Addr) -> u8 {
        let idx = addr as usize;
        self.0[idx]
    }

    fn write(&mut self, addr: Addr, value: u8) {
        let idx = addr as usize;
        self.0[idx] = value
    }
}

// https://tobiasvl.github.io/blog/write-a-chip-8-emulator/#fetchdecodeexecute-loop
const FONT: [u8; 80] = [
    /*
     * 11110000
     * 10010000
     * 10010000
     * 10010000
     * 11110000
     */
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80  // F
];